type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |+
    # Write your code here
    '''print('Starting to make a coffee')
    print('Grinding coffee beans')
    print('Boiling water')
    print('Mixing boiled water with crushed coffee beans')
    print('Pouring coffee into the cup')
    print('Pouring some milk into the cup')
    print('Coffee is ready!')
    no_of_coffes=eval(input('how many cups of coffee you will need:'))
    print('For {} cups of coffee you will need:'.format(no_of_coffes))
    print('{} ml of water'.format(no_of_coffes*200))
    print('{} ml of milk'.format(no_of_coffes*50))
    print('{} g of coffe beans'.format(no_of_coffes*15))
    '''
    '''water=int(input('how many ml of water the coffee machine has:'))
    milk=int(input('how many ml of milk the coffee machine has:'))
    coffe_bean=int(input('how many grams of coffee beans the coffee machine has:'))
    no_of_cups=int(input('how many cups of coffee you will need:'))

    if ((water>=200 or water==0 ) and ((milk>=50 or milk==0)and (coffe_bean>=15 or coffe_bean==0))):
        waters=int(water/200)
        milks=int(milk/50)
        coffe_beans=(coffe_bean/15)
        possible_coffes=min(waters,milks,coffe_beans)
        if no_of_cups==possible_coffes:
            print("Yes, I can make that amount of coffee")
        elif no_of_cups<possible_coffes:
            print("Yes, I can make that amount of coffee (and even {} more than that)".format(int(possible_coffes-1)))
        elif no_of_cups>possible_coffes:
            print('No, I can make only {} cups of coffee'.format(int(possible_coffes)))
    '''

    water,milk,coffe_beans,total_cups,total_amount=400,540,120,9,550


    def display():
        print('The coffee machine has:\n{} of water\n{} of milk\n{} of coffe beans\n{} of disposable cups\n${} of money'.format(water,milk,coffe_beans,total_cups,total_amount))

    def buy():
        coffe_type=(input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino,back - to main menu:'))
        espresso=[250,16]
        latte=[350,75,20]
        cappuccino=[200,100,12]
        global water,milk,coffe_beans,total_cups,total_amount,ingredients
        if(coffe_type=='1'):
            ingredients=[water,coffe_beans]
            water-=250
            coffe_beans-=16
            total_amount+=4
            res=True
            i=0

            for ingredient in ingredients:
                if ingredient<espresso[i]:
                    print('Sorry, not enough {}!')
                    res=False
                    break
                i+=1
            if res==False:
                water+=250
                coffe_beans+=16
                total_amount-=4
            else:
                print('I have enough resources, making you a coffee!')
                total_cups -= 1
        elif(coffe_type=='2'):
            ingredients=[water,milk,coffe_beans]
            water-=350
            milk-=75
            coffe_beans-=20
            total_amount+=7
            res1=True
            i=0
            for ingredient in ingredients:
                if ingredient<latte[i]:
                    print('Sorry, not enough {}!')
                    res1=False
                    break
                i+=1
            if res1==False:
                water+=350
                milk+=75
                coffe_beans+=20
                total_amount-=7
            else:
                print('I have enough resources, making you a coffee!')
                total_cups -= 1


        elif(coffe_type=='3'):
            ingredients=[water,milk,coffe_beans]
            water-=200
            milk-=100
            coffe_beans-=12
            total_amount+=6
            res2=True
            i=0
            for ingredient in ingredients:
                if ingredient<cappuccino[i]:
                    print('Sorry, not enough {}!')
                    res2=False
                    break
                i+=1
            if res2==False:
                water+=200
                milk+=100
                coffe_beans+=12
                total_amount-=6
            else:
                print('I have enough resources, making you a coffee!')
                total_cups -= 1

        else:
            pass
    def fill():
        add_water=eval(input('how many ml of water do you want to add:'))
        add_milk=eval(input('how many ml of milk do you want to add:'))
        add_coffe_beans=eval(input('how many grams of coffee beans do you want to add:'))
        add_cups=eval(input('how many disposable cups of coffee do you want to add:'))
        global water,milk,coffe_beans,total_cups,total_amount
        water+=add_water
        milk+=add_milk
        coffe_beans+=add_coffe_beans
        total_cups+=add_cups

    def take():
        global total_amount
        print('I gave you ${}'.format(total_amount))
        total_amount=0


    while True:
        action = input('action (buy,fill,take,remaining,exit):')
        if action=='exit':
            break
        elif action == 'buy':
            buy()
        elif action == 'fill':
            fill()
        elif action=='take':
            take()
        else:
            display()










  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 6
